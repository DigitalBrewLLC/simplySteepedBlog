---
import { type CollectionEntry, getCollection } from 'astro:content'
import ListRelatedPosts from '../../components/ListRelatedPosts.astro'
import TableOfContents from '../../components/Navigation/TableOfContents.astro'
import BlogImage from '../../components/mdx/BlogImage.astro'
import BlogPost from '../../layouts/BlogPost.astro'
import { getPosts } from '../../utils'

const posts = await getCollection('blog')
export async function getStaticPaths() {
	const posts = await getPosts()

	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post
	}))
}
type Props = CollectionEntry<'blog'>

const post = Astro.props
const MAX_POSTS = 3
const getRelatedPosts = (post: Props) => {
	const lowercaseTags = post.data.tags.map((tag: string) => tag.toLowerCase())
	const relatedPosts = posts.filter(
		(p) =>
			p.slug !== post.slug &&
			p.data.tags.some((t: string) => lowercaseTags.includes(t.toLowerCase()))
	)
	return relatedPosts.slice(0, MAX_POSTS)
}

const relatedPosts = getRelatedPosts(post)

const { Content, headings, remarkPluginFrontmatter } = await post.render()
---

<BlogPost
	data={post.data}
	headings={headings}
	readTime={remarkPluginFrontmatter.minutesRead}
>
	<div class='grid grid-cols-1 md:grid-cols-[20%_auto] gap-10 mt-8'>
		<!-- aside  -->
		<aside class='md:flex flex-col gap-8 hidden'>
			<div
				class='sticky top-24 self-start hidden md:block transition-all duration-200'
			>
				{headings && headings.length > 0 && <TableOfContents {headings} />}
			</div>
		</aside>

		<!-- post -->
		<article class='max-w-full w-full'>
			<div
				class='prose prose-lg md:prose-xl dark:prose-invert mb-12 min-w-full'
			>
				<Content components={{ img: BlogImage }} />
			</div>

			<!-- related posts -->
			{
				relatedPosts.length > 0 && (
					<footer>
						<h2 class='font-bold text-lg dark:text-oatmeal mb-6'>
							Related Posts:
						</h2>
						<ListRelatedPosts posts={relatedPosts} />
					</footer>
				)
			}
		</article>
	</div>
</BlogPost>
